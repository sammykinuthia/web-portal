name: Deploy Web Portal

on:
  push:
    branches:
      - main 
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      # build docker image
    - name: Build Docker image
      run: docker build -t web-portal .
    - name: Push Docker image to docker hub
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Push Docker image
      run: docker tag web-portal ${{ secrets.DOCKER_USERNAME }}/web-portal
    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/web-portal
  
  set-up-aws:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1  

    - name: Deploy CloudFormation stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: WebPortalStack
        template: aws/cloudformation.yaml
        capabilities: CAPABILITY_IAM
        no-fail-on-empty-changeset: "1"
    

    - name: Get CloudFormation Outputs
      id: get_outputs
      run: |
        outputs=$(aws cloudformation describe-stacks --stack-name WebPortalStack --query 'Stacks[0].Outputs')
        echo "::set-output name=outputs::$outputs"

    - name: Print Outputs
      run: |
        echo "Outputs: ${{ steps.get_outputs.outputs.outputs }}"
  
  deploy:
    needs: set-up-aws
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
    - name: Install npm dependencies
      run: npm install
    - name: Run build task
      run: CI=false npm run build --if-present
    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SOURCE: "build/"
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: ${{ secrets.REMOTE_TARGET }}
        EXCLUDE: "/node_modules/"
        SCRIPT_BEFORE: |
            whoami
            ls -al
        SCRIPT_AFTER: |
            whoami
            ls -al
            echo $RSYNC_STDOU